plot(x,y, type="l", col=grey(.5))
grid()
plot(x,y, type="l", col=grey(.5))
grid()
f20 <- rep(1/20,20)
y_lag <- filter(y, f20, sides=1)
lines(x,y_lag,col="red")
f21 <- rep(1/21,21)
y_sym <- filter(y, f21, sides=2)
lines(x,y_sym, col="blue")
mtcars[mtcars$cyl = 4, ]
mtcars[mtcars$cyl4, ]
mtcars[mtcars$cyl == 4, ]
mtcars
mtcars[-1:4, ]
mtcars[-1,0:4, ]
source(SA1.R)
source("SA1.R")
source()
source(file = "SA1.R")
mtcars[-1:4, ]
mtcars[mtcars$cyl <= 5]
mtcars[mtcars$cyl <= 5,]
mtcars
mtcars[-1:4]
mtcars[1:20]
mtcars[mtcars$cyl == 4 | 6, ]
mtcars[-1:-4]
mtcars[mtcars$cyl <= 5,]
mtcars[mtcars$cyl == 4 || 6, ]
x <- 1:5; x[NA]
y <- 1:2;
y[1]
y <- 1:2; y[1]
y <- 1:2; y[2]
y <- 1:2; y[3]
df[is.na(df)] <- 0
df <- 1:4
df[is.na(df)] <- 0
df[1]
df[3]
df[6]
mtcars[1:20]
mtcars[1:20,]
mtcars[1:20,0]
mtcars[1:20,1]
mtcars[1:20,]
mtcars
mtcars[1:20,5]
mtcars[1:20,1]
mtcars[1:20,0]
mtcars[1:20,1]
df <- 1:4;
x <- 1:5; x[NA]
x <- 1:5; x[3]
x <- 1:5; x
x <- 1:5; x[4|5]
x <- 1:5; x[4:5]
mtcars[-1:-4]
mtcars[-1:-4,]
mtcars[-1:-4,]
mtcars[-1:-4]
x <- outer(1:5, 1:5, FUN = "*")
x[upper.tri(x)]
mtcars[mtcars$cyl == 4 | 6, ]
mtcars[mtcars$cyl == 4 | == 6, ]
mtcars[mtcars$cyl == (4 | 6), ]
mtcars[mtcars$cyl == 4 6, ]
mtcars[mtcars$cyl == 4|6, ]
mtcars
mtcars[mtcars$cyl == c(4,6), ]
mtcars[mtcars$cyl == 8, ]
len(mtcars[mtcars$cyl == 8, ])
mtcars[mtcars$cyl == c(4,6), ]
mtcars[mtcars$cyl == (4,6), ]
mtcars[-(1:4),]
mtcars[-1:-4,]
x <- outer(1:5, 1:5, FUN = "*")
x
x[upper.tri(x)]
x <- 1:5; x[NA]
x <- 1:5; x[is.na(x)]
mtcars[mtcars$cyl == 4 | 6, ]
mtcars[mtcars$cyl == (4 | 6), ]
mtcars[mtcars$cyl == (4|6), ]
mtcars[mtcars$cyl == 4 & 6, ]
mtcars[mtcars$cyl == 4 & mtcars$cyl == 6, ]
x <- 1:5; x[NA]
x[is.na(x)];
x[NA]
x[60]
> mtcars[mtcars$cyl == 4 | == 6, ]
> mtcars[mtcars$cyl (== 4 | == 6), ]
> mtcars[cyl == 4 | cyl == 6,]
> mtcars[cyl == 4 & cyl == 6,]
mtcars
mtcars[cyl == 4,]
mtcars[cyl == 4,]
> mtcars[mtcars$cyl == (4 |6), ]
> mtcars[mtcars$cyl == 4 |6, ]
> mtcars[mtcars$cyl == 4 | 6, ]
> mtcars[mtcars$cyl == 4 || 6, ]
> mtcars[(mtcars$cyl == 4 | mtcars$cyl == 6), ]
mtcars[mtcars$cyl == 4 | 6, ]
mtcars[(mtcars$cyl == 4 | mtcars$cyl == 6), ]
x <- 1:5; x[NA]
x <- 1:5; x[1:5]
x <- 1:5; x[1:3]
x <- 1:5; x[1:NA]
x.subset(NA)
df <- 1:10
df[NA]
1 + NA
2 + 1 + NA
3 + NA
1 + NaN
x[==NA]
x[x==NA]
x==NA
1 == NA
x[x<6]
x[<6]
soruce
evaluate(function(x) {x[length(x)]}, c(8,4,0))
install.packages("tidyverse")
library(tidyverse)
install.packages(c("nycflights13", "gapminder", "Lahman"))
mpg
displ
mpg:displ
mpg$displ
mpg$trans
ggplot(data=mpg)
ggplot(data=mpg) + geom_point(mapping=aes(x=displ, y =hwy))
ggplot(data=mpg)
ggplot(data=mtcars)
ggplot(data=mtcars) + geom_point(mapping=aes(y=cyl, x=model))
mtcars
ggplot(data=mtcars) + geom_point(mapping=aes(y=cyl, x=hp))
head(mtcars)
nrow(mtcars)
ncol(mtcars)
?mpg
?mtcars
ggplot(data=mpg) + geom_point(mapping=aes(x=cyl, y =hwy))
ggplot(data=mpg) + geom_point(mapping=aes(x=class, y =drv))
ggplot(data=mpg) + geom_point(mapping=aes(x=cyl, y =drv, color=class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ls
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=class)
)
mtcars
head(mtcars)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke=class)
)
?geom_point
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, stroke=cyl)
)
ggplot(data = mpg) +
geom_point(mapping = aes(color = displ < 5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cyl < 5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 4)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
?facet_wrap
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
ggplot(data=mpg) + geom_histogram(mapping=aes(color=class))
ggplot(data=mpg) + geom_histogram(mapping=aes(color=class), bins = 30)
ggplot(data=mpg) + geom_histogram(mapping=aes(x=displ, y=cyl, color=class), bins = 30)
ggplot(data=mpg) + geom_histogram(mapping=aes(x=displ, y=cyl, color=class, bins = 30)
)
?se
??se
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
install.packages("shinydashboard")
library("shinydashboard")
dashboardPage(dashboardHeader(), dashboardSidebar(),dashboardBody())
library(shiny)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ls()
rm(list=ls())
ls
ls()
install.packages("readxl")
install.packages("readxl")
ls()
read_excel("Asst-2-Data.xlsx")
library(readxl)
read_excel(
"Asst-2-Data.xlsx"
)
read_excel(
"Desktop/R-projects/Competing-With-Analytics-Assts/Asst-2-Data.xlsx"
)
ls
asst2Data <- read_excel(
"Desktop/R-projects/Competing-With-Analytics-Assts/Asst-2-Data.xlsx"
)
View(asst2Data)
head(asst2Data)
asst2Data <- asst2Data[-1,]
View(asst2Data)
asst2Data <- read_excel(
"Desktop/R-projects/Competing-With-Analytics-Assts/Asst-2-Data.xlsx"
)
asst2Data <- asst2Data[,-1]
install.packages("Amelia")
library(Amelia)
missmap(asst2Data,main="Missing values vs observed")
testData <- asst2Data[!is.na(asst2Data$CKD)]
testData <- asst2Data[!is.na(asst2Data$CKD),]
missmap(testData)
rm(testData)
testData <- asst2Data[,!is.na(asst2Data$CKD)]
testData <- data.frame(asst2Data[,!is.na(asst2Data$CKD)])
View(asst2Data[,!is.na(asst2Data$CKD)])
testData <- asst2Data[!is.na(asst2Data$CKD),]
View(testData)
testData <- asst2Data[is.na(asst2Data$CKD),]
CKDisNAData <- asst2Data[is.na(asst2Data$CKD),]
rm(testData)
CKDisNotNAData <- asst2Data[!is.na(asst2Data$CKD)]
CKDisNotNAData <- asst2Data[!is.na(asst2Data$CKD),]
missmap(CKDisNAData)
missmap(asst2Data)
missmap(CKDisNAData)
missmap(asst2Data)
ls
missmap(asst2Data)
summary(asst2Data)
ozone[1,1,]
data(ozone)
install.packages(c("easypackages","plyr","ozone"))
library(easypackages)
libraries(plyr,ozone)
data(ozone)
install.packages(c("easypackages","plyr","ozone"))
library(easypackages)
libraries("plyr")
data(ozone)
ls()
View(ozone)
data(ozone)
rm(list = ls())
install.packages(c("easypackages","plyr","ozone"))
library(easypackages)
libraries("plyr")
ozoneData <- data(ozone)
install.packages(c("easypackages", "plyr", "ozone"))
View(ozoneData)
View(ozone)
?ozone
value <- ozone[1,1,]
View(value)
rm(ozoneData)
ls()
?sapply
?llply
?a_ply
?plyr
library("Amelia", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
missmap(ozone)
missmap(ozone)
missmap(ozone)
head(ozone)
?promise
ls()
?data.table
??data.table
?data_table
?markdown
install.packages(c("easypackages","plyr","ozone","reshape2","MASS"))
library(easypackages)
libraries("plyr","reshape2","MASS")
install.packages(c("easypackages", "plyr", "ozone", "reshape2", "MASS"))
dim(ozone)
24*24*72
?MASS
??MASS
?dim
?ordered
?ozone
cls()
clear()
?clear
cls
cls()
?seq_len
install.packages("markovchain")
?markovchain
library(markovchain)
clear
cls()
rm
library(markovchain)
library(markovchain)
library(diagram)
# Install and setup packages
install.packages("markovchain","diagram")
library(markovchain)
library(diagram)
install.packages("markovchain", "diagram")
# Install and setup packages
packagesToInstall = c("markovchain","diagram")
install.packages(packagesToInstall)
library(markovchain)
library(diagram)
# Install and setup packages
packagesUsed = c("markovchain","diagram","expm","pracma","easypackages")
install.packages(packagesUsed)
libraries(packagesUsed)
install.packages(packagesUsed)
rm(list=ls())
# Install and setup packages
packagesUsed = c("markovchain","diagram","expm","pracma","easypackages")
install.packages(packagesUsed)
libraries(packagesUsed)
library(easypackages) # Helps me load these libraries easier
libraries(packagesUsed)
seatsLeft <- as.integer(readline(prompt("How many seats left")))
daysLeft <- as.integer(readline(prompt("How many days left?")))
daysLeft <- as.integer(readline(prompt("How many days left?")))
# Depends on below functions
readinteger <- function(msg)
{
msgAsString <- deparse(substitute(msg))
n <- readline(prompt=msgAsString)
n <- as.integer(n)
if (is.na(n)){
n <- readinteger()
}
return(n)
}
daysLeft <- readinteger("How many days left")
daysLeft
daysLeft <- readinteger("How many days left?\n")
daysLeft <- readinteger("How many days left?/n")
readinteger <- function(msg)
{
msgAsString <- deparse(substitute(msg))
n <- readline(prompt=msgAsString)
cat("\n")
n <- as.integer(n)
if (is.na(n)){
n <- readinteger()
}
return(n)
}
daysLeft <- readinteger("How many days left?/n")
# Our code uses below functions
readinteger <- function(msg)
{
print("We will ask you a question about current state, please write it in console")
msgAsString <- deparse(substitute(msg))
print(msgAsString)
n <- readline()
n <- as.integer(n)
if (is.na(n)){
n <- readinteger()
}
return(n)
}
daysLeft <- readinteger("How many days left?       ")
# Our code uses below functions
readinteger <- function(msg)
{
print("We will ask you a question about current state, please write it in console")
print(msgAsString)
n <- readline()
n <- as.integer(n)
if (is.na(n)){
n <- readinteger()
}
return(n)
}
daysLeft <- readinteger("How many days left?")
# Our code uses below functions
readinteger <- function(msg)
{
print("We will ask you a question about current state, please write it in console")
print(msg)
n <- readline()
n <- as.integer(n)
if (is.na(n)){
n <- readinteger()
}
return(n)
}
daysLeft <- readinteger("How many days left?")
seatsLeft <- readinteger("How many seats are there left?")
ls
ls
ls()
rm(ls())
ls
getwd
getwd()
setwd("users/mding/Desktop/R-Projects")
ls
library(readr)
SuperiorGrainDataset <- read_csv("~/Desktop/R-projects/CompWithAnalytics/SuperiorGrainDataset.csv")
View(SuperiorGrainDataset)
ls()
rm(f20)
ls
ls9)
hist(SuperiorGrainDataset$`Time of Arrival`)
hist(SuperiorGrainDataset$`Loading time`)
hist(SuperiorGrainDataset$`Time of Arrival`)
hist(SuperiorGrainDataset$`Loading time`)
hist(SuperiorGrainDataset$`Time of Arrival`)
hist(SuperiorGrainDataset$`Time of Arrival`, main='Time of Arrival')
hist(SuperiorGrainDataset$`Loading time`, main="Loading Time")
hist(SuperiorGrainDataset$`Loading time`, main="Loading Time", col="green")
hist(SuperiorGrainDataset$`Loading time`, main="Loading Time", col="blue")
hist(SuperiorGrainDataset$`Time of Arrival`, main='Time of Arrival', col="blue")
rm("f21")
ls()
rm("num")
rm("y_lag")
rm("y_sym")
ls()
rm("x")
rm("y")
hist(SuperiorGrainDataset$`Loading time`, main="Loading Time", col="blue")
hist(SuperiorGrainDataset$`Time of Arrival`, main='Time of Arrival', col="blue")
newWharfCost <- 1500000
demurrCharge <- 2000
shipsHandledPerWk <- 3.5
hist(SuperiorGrainDataset$`Loading time`, main="Loading Time", col="blue")
hist(SuperiorGrainDataset$`Time of Arrival`, main='Time of Arrival', col="blue")
hist(SuperiorGrainDataset$`Loading time`, main="Loading Time", col="blue")
interArrivalTime <- diff(SuperiorGrainDataset$`Time of Arrival`)
hist(interArrivalTime, main="Interarrival Time", col='blue')
hist(SuperiorGrainDataset$`Loading time`, main="Loading Time", col="blue")
arrivalRatePerDay <- 135/240
rm( ls() - l)
rm( ls() -l)
rm()
View(SuperiorGrainDataset)
rm(ls())
rm(l<-ls())
rm(list = ls())
library(shiny); runApp('Desktop/DataSciProject/ShinyTutorial/helloWorld.R')
install.packages(packagesUsed)
# Setup should be used as a config file for all packages, special constants and variables used
# Packages installed and used
packagesUsed <- c("shiny","easypackages")
install.packages(packagesUsed)
update.packages(packagesUsed)
install.packages(packagesUsed)
install.packages(packagesUsed)
install.packages(packagesUsed)
packagesUsed <- c("shiny","easypackages")
install.packages(packagesUsed)
install.packages(packagesUsed)
update.packages(packagesUsed)
library(easypackages) # use this to load + managed multiple packages easily
libraries(packagesUsed)
runApp('helloWorld.R')
